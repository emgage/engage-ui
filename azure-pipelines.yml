# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- releases/r1-release
- demo/develop
- develop
- squad6/cyberdemo/develop
variables:
- group: 'Platform Release Variables'

pool:
  vmImage: ubuntu-latest
workspace:
  clean: all

steps:
- checkout: self
  persistCredentials: true
  clean: true

- script: |
    #!/bin/bash
    git checkout develop
    git checkout -
    BEHIND=$(git rev-list --left-right --count develop...HEAD|awk '{print$1}')
    if [ $BEHIND -ne 0 ]
    then
        echo "false"
        echo "CI failed, Your branch $(Build.SourceBranch) is $BEHIND commits behind of develop branch changes, Kindly merge the changes from develop branch and rerun the pipeline"
        exit 1
    else
        echo "true"
    fi
  condition: not(or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/squad6/cyberdemo/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/demo/develop'),  eq(variables['Build.SourceBranch'], 'refs/heads/releases/r1-release'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix'), eq(variables['System.PullRequest.TargetBranch'], 'master'), eq(variables['System.PullRequest.TargetBranch'], 'releases/r1-release'), eq(variables['System.PullRequest.TargetBranch'], 'demo/develop')))
  displayName: "Check if Branch is in Sync"

- task: NodeTool@0
  inputs:
    versionSpec: '12.20.x'
  displayName: 'Use Node 12'

- task: CmdLine@2
  inputs:
    script: |
      #!/bin/bash
      git config --global user.email "buildagent@emgage.com"
      git config --global user.name "Automated VSTS Build Server"
      BRANCH=$(echo $(Build.SourceBranch) | sed 's/refs\/heads\///')
      echo "Checking out $BRANCH"
      git checkout $BRANCH
  displayName: 'Attach branch'
  condition: not(eq(variables['Build.SourceBranchName'], 'merge'))

- script: |
    echo "@emgage:=registry" > .npmrc
    echo "//registry.npmjs.org/:_authToken=$(NPM_TOKEN)" >> .npmrc
  displayName: "Write NPMRC"

- task: CmdLine@2
  inputs:
    script: |
      npm install
      npm rebuild node-sass
  displayName: 'Npm Install'

- task: CmdLine@2
  inputs:
    script: 'npm run build-dev'
  displayName: 'Npm Install'

- task: CmdLine@2
  inputs:
    script: |
      #!/bin/bash
      lib_path='engage-ui@develop/lib'
      git update-index --assume-unchanged .npmrc
      VERSION_1=$(npm view engage-ui@latest version)
      VERSION_2=$(npm view engage-ui@develop version)
      VERSION_3=$(npm view engage-ui@demo version)
      VERSION_4=$(npm view engage-ui@release version)
      VERSION_5=$(npm view engage-ui@squad6 version)
      
      NEWEST_VERSION=$(printf '%s\n' "$VERSION_1" "$VERSION_2" "$VERSION_3" "$VERSION_4" "$VERSION_5"| sort -rV | head -n1)
      echo "$NEWEST_VERSION"
      # Sometimes version in package.json doesn't get updated hence making sure it is updated manually.
      sed -i "s/\"version\": \".*\",/\"version\": \"$NEWEST_VERSION\",/g" package.json
      git update-index --assume-unchanged package.json
      BRANCH_NAME="$(echo $(Build.SourceBranch)|sed 's#refs/heads/##g')"
      # Tag master a major release, release and demo as minor releases and rest as prerelease.
      case "$BRANCH_NAME" in
      'master')
        npm version --no-git-tag-version major
        npm publish --tag latest
        lib_path='engage-ui@latest/lib'
        ;;
      'demo/develop')
        npm version --no-git-tag-version minor
        npm publish --tag demo
        lib_path='engage-ui@demo/lib'
        ;;
      'releases/r1-release')
        npm version --no-git-tag-version minor
        npm publish --tag release
        lib_path='engage-ui@release/lib'
        ;;
      'squad6/cyberdemo/develop')
        npm version --no-git-tag-version minor
        npm publish --tag squad6
        lib_path='engage-ui@squad6/lib'
        ;;
      *)
        npm version --no-git-tag-version prerelease
        npm publish --tag develop
        lib_path='engage-ui@develop/lib'
        ;;
      esac
      echo "publishing to $lib_path"
      git add .
      git commit -m "chore: Release" --no-verify
      git push
      echo "##vso[task.setvariable variable=engageui]$lib_path"
  displayName: 'Tag and Publish'
  condition: and(not(startsWith(variables['Build.SourceVersionMessage'], 'chore')), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/demo/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/releases/r1-release')))

- task: S3Upload@1
  inputs:
    awsCredentials: 'AWS Connection'
    regionName: 'us-west-2'
    bucketName: 'emgage.software'
    sourceFolder: '$(System.DefaultWorkingDirectory)'
    globExpressions: 'lib/+(EngageUI.js|DeliciousTheme.js)'
    targetFolder: 'cdn/$(engageui)'
    filesAcl: 'public-read'
    flattenFolders: true
  condition: and(not(startsWith(variables['Build.SourceVersionMessage'], 'chore')), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/demo/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/squd6/cyberdemo/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/releases/r1-release')))
  displayName: 'Copy to S3'
