@import './RangeSlider';
@import 'foundation/colors';
@import 'shared/controls';
// Variables
// ========================================================================

$stacking-order: (
  input: 10,
  output: 20,
);

$range-wrapper: rem(28px);

$range-thumb-border-error: rem(2px) solid color(red, dark);
$range-thumb-shadow: var(
  --p-override-none,
  (0 0 0 rem(1px) color(blue, base), shadow(faint))
);
$range-thumb-shadow-hover: var(
  --p-override-none,
  (0 0 0 rem(1px) color(blue, base), shadow(faint))
);
$range-thumb-shadow-error: var(--p-override-none, 0 0 0 rem(1px) color(red, dark));
$range-thumb-shadow-focus: var(
  --p-override-none,
  0 0 0 rem(1px) indigo
);

.Wrapper {
  position: relative;
  width: 100%;
  display: flex;
  align-items: center;
  overflow-x:hidden;
  padding-bottom:1.6rem;
}

.TrackWrapper {
  position: relative;
  display: flex;
  align-items: center;
  width: 100%;
  min-height: $range-wrapper;
  cursor: pointer;

  &.disabled {
    opacity: 0.8;
    cursor: not-allowed;
  }
}

.Track {
  position: absolute;
  z-index: 1;
  width: 100%;
  height: $range-track-height;
  border-radius: $range-thumb-size;
  background-color: grey;

  --unselected-range: #{var(--p-override-transparent, color('sky', 'dark'))};
  --selected-range: #{var(--p-interactive, indigo)};
  background-image: linear-gradient(to right, var(--gradient-colors));

  .error & {
    --selected-range: #{var(--p-action-critical, color(red, dark))};
      background-image: linear-gradient(to right, var(--gradient-colors));
  }
  
  
  .disabled & {
    background: var(--p-border-disabled, color('sky', 'dark')) none;
  }
}
  .Track--dashed {
    @include track-dashed;
  }

  .Thumbs {
    position: absolute;
    z-index: z-index('input', $stacking-order);
    padding: 0;
    width: $range-thumb-size;
    height: $range-thumb-size;
    border-radius: 50%;
    border: border-width() solid var(--p-interactive, color(blue, base));
    box-shadow: $range-thumb-shadow;
    background: linear-gradient(
      var(--p-interactive, color(blue, base)),
      var(--p-interactive, color(blue, base))
    );
    -webkit-tap-highlight-color: transparent;
    cursor: -webkit-grab;
    transition: transform var(--p-duration-1-5-0, duration())
      var(--p-ease, easing());

      &.disabled {
        cursor: not-allowed;
        border-color: var(--p-border-disabled, color('sky', 'dark'));
        background: var(--p-border-disabled, white);
      }

      &:hover {
        box-shadow: $range-thumb-shadow-hover;
      }
    
      &:active {
        transform: scale(var(--p-range-slider-thumb-scale, 1));
      }

      &:focus {
        outline: 0;
        border-color: var(--p-override-transparent, indigo);
        box-shadow: var(--p-override-none, $range-thumb-shadow-focus);
    
        @media (-ms-high-contrast: active) {
          outline: 1px solid ms-high-contrast-color('text');
        }
      }

      .error & {
        border-color: var(--p-action-critical, color(red, dark));
        background: linear-gradient(
          var(--p-action-critical, color('sky', 'lighter')),
          var(--p-action-critical, color('sky', 'light'))
        );
        box-shadow: $range-thumb-shadow-error;
      }
      &:after {
        content: "";
        display: block;
        position: absolute;
        background-color: color(blue, base);
        width: 5000px;
        height: 2px;
        left: 17px;
        top: 7px;
      }
  }

  
 .Thumbs:nth-child(5) {
    &:after {
      content: "";
    display: block;
    position: absolute;
    background-color: gray;
    width: 5000px;
    height: 2px;
    left: 17px;
    top: 7px;
    }
  }

  $range-output-size: rem(32px);
  $range-output-spacing: rem(16px);

  .Prefix {
    flex: 0 0 auto;
    margin-right: spacing(tight);
  }
  
  .Suffix {
    flex: 0 0 auto;
    margin-left: spacing(tight);
  }
  
  .Output {
    position: absolute;
    z-index: z-index('output', $stacking-order);
    top: var(--p-range-slider-thumb-size-active, 2.6rem);
    opacity: 1;
    visibility: visible;
    pointer-events: none;
    transition-property: opacity, visibility, bottom;
    transition-duration: var(--p-duration-1-5-0, duration());
    transition-timing-function: var(--p-ease, easing());
    transform: translateX(calc(-50% + #{$range-thumb-size / 2}));
  }

  .OutputBubble {
    position: relative;
    display: flex;
    padding: 0 spacing(tight);
    min-width: $range-output-size;
    height: $range-output-size;
    background-color: var(--p-surface, color('ink'));
    color: white;
    box-shadow: var(--p-popover-shadow, --p-override-none);
    border-radius: border-radius();
    transition-property: transform;
    transition-duration: 150ms;
    transition-timing-function: cubic-bezier(0.4, 0.22, 0.28, 1);
  
    // stylelint-disable selector-max-specificity, selector-max-combinators, selector-max-class
    .Thumbs:hover + .Output &,
    .Thumbs:active + .Output &,
    .Thumbs:focus + .Output & {
      transform: translateY(-$range-output-spacing);
  
      @include page-content-when-not-partially-condensed {
        transform: translateY(-($range-output-spacing / 2));
      }
    }
    // stylelint-enable selector-max-specificity, selector-max-combinators, selector-max-class
  }
  
  .OutputText {
    @include text-style-subheading;
    display: block;
    flex: 1 1 auto;
    margin: auto;
    text-align: center;
    color: var(--p-text, "white");
  }

  