@import 'foundation/borders';
@import 'foundation/border-radius';
@import 'foundation/colors';
@import 'foundation/spacing';
@import 'foundation/shadows';
@import 'foundation/utilities';
@import 'foundation/z-index';
@import 'shared/controls';
@import 'shared/icons';
@import 'shared/typography';

$stacking-order: (
  backdrop: 10,
  input: 20,
  icon: 30
);

$icon-size: rem(16px);
$spinner-size: rem(20px);
$input-horizontal-padding: spacing(tighter) * 1.5;

// Without a small amount of vertical adjustment, the text
// in the Select does not appear vertically centered.
$input-vertical-adjust: rem(1px);

.select {
  position: relative;

  // IE 11 fix to remove default dropdown arrow
  select::-ms-expand {
    display: none;
  }
}

.disabled {
  .backdrop {
    @include control-backdrop(disabled);
  }

  .customIcon {
    opacity: 0.4;
  }
}

.error {
  .backdrop {
    @include control-backdrop(error);
  }

  // Need to override the higher specificity of the sibling selector
  // so that errors still have red borders.
  // stylelint-disable-next-line selector-max-specificity
  .input:focus ~ .backdrop {
    @include control-backdrop(focused-error);
  }
}

.backdropHidden {

  .backdrop {
    @include control-backdrop(backdrop-hidden);
  }

  &.disabled > .backdrop {
    @include control-backdrop(backdrop-hidden);
  }

}

.placeholder {
  .input {
    color: color(ink, lightest);
  }

  &.error .input {
    // This is the only place this color is used.
    // stylelint-disable-next-line color-no-hex
    color: #9c9798;
  }
}

.backdrop {
  @include control-backdrop;
  position: absolute;
  z-index: z-index(backdrop, $stacking-order);
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

.customIcon {
  @include recolor-icon(color(ink, lighter));
  position: absolute;
  z-index: z-index(icon, $stacking-order);
  top: 50%;
  right: $input-horizontal-padding;
  transform: translateY(-50%);
  margin-right: (-0.25 * $icon-size);
  pointer-events: none;
}

.input {
  @include text-style-input;
  position: relative;
  z-index: z-index(input, $stacking-order);
  width: 100%;
  min-height: control-height();
  margin: 0;
  padding: control-vertical-padding() ($input-horizontal-padding + $icon-size) control-vertical-padding() $input-horizontal-padding;
  background: transparent;
  border: border(transparent);
  appearance: none;
  line-height: rem(20px);

  &:focus {
    outline: none;

    ~ .backdrop {
      @include control-backdrop(focused);
    }
  }

  &:disabled {
    color: color(ink, lightest);
    opacity: 1;
  }
}

.loading {
  > .input {
    padding-right: ($input-horizontal-padding + $icon-size + $spinner-size + 0.6rem);
  }
}

.spinnerWrapper {
  position: absolute;
  z-index: z-index(icon, $stacking-order);
  top: 50%;
  right: ($input-horizontal-padding + $icon-size);
  transform: translateY(-50%);
  width: $spinner-size;
  height: $spinner-size;
  pointer-events: none;
}

.readOnly {

  .customIcon {
    opacity: 0;
  }

  &:not(.disabled) > .input:disabled {
    color: color(ink);
    opacity: 1;
  }

  .spinnerWrapper {
    right: ($input-horizontal-padding);
  }
}
